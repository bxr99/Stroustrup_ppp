Q: What do we mean by "Programming is understanding"?
A:

Q: The chapter details the creation of a calculator program.  Write a short
   analysis of what the calculator should be able to do.
A:

Q: How do you break a problem up into smaller manageable parts?
A:

Q: Why is creating a small, limited version of a program a good idea?
A:

Q: WHy is feature creep a bad idea?
A:

Q: What is the purpose of testing?
A:

Q: According to the outline in the chapter, describe the difference between a
   "Term", "Expression", "Number", and a "Primary".
A:

Q: In the chapter, an input was broken down into its components (listed above).
   Do this for (17+4)/(5-1)
A:

Q: Why does the program not have a function called number()?
A:

Q: What is a token?
A:

Q: What is a grammar? A grammar rule?
A:

Q: What is a class?  What do we use classes for?
A:

Q: How can we provide a default value for a member of a class?
A:

Q: In the expression function, why is the default switch-statement to "put back"
   the token?
A:

Q: What is "look-ahead"?
A:

Q: What does putback() do and why is it useful?
A:

Q: Why is the remainder (modulus) operation, difficult to implement in the term()?
A:

Q: What do we use the two data members of the Token class for?
A:

Q: Why do we (sometimes) split a class's members into private and public members?
A:

Q: What happens in the Token_stream class when there is a token in the buffer and
   the get() function is called?
A:

Q: Why were the ';' and 'q' characters added to the switch-statement in the get()
   function of the Token_stream class?
A:

Q: When should we start testing our program?
A:

Q: What is a "user-defined type"?  Why would we want one?
A:

Q: What is the interface to a C++ "user-defined type"?
A:

Q: Why do we want to rely on libraries of code?
A:
